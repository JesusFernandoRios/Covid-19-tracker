{"version":3,"sources":["Components/InfoBox.jsx","utils.js","Components/Map.jsx","Components/Table.jsx","Components/LineGraph.jsx","App.js","index.js"],"names":["InfoBox","title","cases","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrint","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","currentCountry","setCurrentCountry","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","res","name","iso2","getCountryData","onCountryChange","selectedCountry","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8d18f2d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\nimport './style/infobox.css'\r\n\r\nexport default function InfoBox({title , cases, active, total, ...props}) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && `infoBox--selected`}`}>\r\n            <CardContent>\r\n                <Typography className=\"infobox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className=\"infobox__cases\">{cases}</h2>\r\n\r\n                <Typography className=\"infobox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 1000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrint = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from 'react'\r\nimport './style/map.css'\r\nimport { Map as LeafletMap, TileLayer} from 'react-leaflet'\r\nimport {showDataOnMap} from '../utils'\r\n\r\n\r\nfunction Map({ casesType, countries, center, zoom }) {\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer \r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport './style/table.css'\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map( ({country, cases}) => {\r\n               return(\r\n               <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format('0,0')}</strong></td>\r\n                </tr>\r\n               )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, {useState, useEffect} from 'react'\r\nimport './App.css';\r\nimport { FormControl, MenuItem, Select, Card, CardContent}from '@material-ui/core'\r\nimport InfoBox from './Components/InfoBox'\r\nimport Map from './Components/Map'\r\nimport Table from './Components/Table'\r\nimport {sortData, prettyPrint} from './utils'\r\nimport LineGraph from './Components/LineGraph'\r\nimport 'leaflet/dist/leaflet.css'\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([])\r\n  const [country, setCountry] = useState(\"worldwide\")\r\n  const [currentCountry, setCurrentCountry] = useState({})\r\n  const [tableData, setTableData] = useState([])\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796})\r\n  const [mapZoom, setMapZoom] = useState(3)\r\n  const [mapCountries, setMapCountries] = useState([])\r\n  const [casesType, setCasesType] = useState('cases')\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n    .then(res => res.json())\r\n    .then(data => setCurrentCountry(data))\r\n  },[])\r\n\r\n  useEffect(() => {\r\n\r\n    const getCountryData = async () =>{\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n\r\n        const countries = data.map((country) => (\r\n          {\r\n            name:country.country,\r\n            value: country.countryInfo.iso2\r\n          }\r\n        ))\r\n\r\n        const sortedData = sortData(data)\r\n        setTableData(sortedData);\r\n        setMapCountries(data);\r\n        setCountries(countries);\r\n      })\r\n    } \r\n\r\n    getCountryData()\r\n  },[])\r\n\r\n  \r\n  const onCountryChange = async (selectedCountry) => {\r\n\r\n    const countryCode = selectedCountry.target.value\r\n\r\n    const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`\r\n\r\n    await fetch(url)\r\n    .then(\r\n      res => res.json()\r\n    ).then( data => {\r\n\r\n      setCountry(countryCode)\r\n      setCurrentCountry(data)\r\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long])\r\n      setMapZoom(5)\r\n      \r\n    })\r\n    \r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"leftside__app\">\r\n\r\n        <div className=\"app__header\">\r\n          <h1>Covid-19 Tracker</h1>\r\n\r\n          <FormControl className=\"app__dropdown\">\r\n            <Select\r\n            variant=\"outlined\" value={country} onChange={onCountryChange}>\r\n\r\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n\r\n              {countries.map((country) => (\r\n              <MenuItem value={country.value}>{country.name}</MenuItem>\r\n              ))}\r\n\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n\r\n        <div className=\"stats\">\r\n\r\n          <InfoBox \r\n          active={casesType === 'cases'}\r\n          onClick={(e) => setCasesType('cases')}\r\n          cases={prettyPrint(currentCountry.todayCases)}\r\n          total={prettyPrint(currentCountry.cases)} \r\n          title=\"Coronavirus Cases\"/>\r\n\r\n          <InfoBox\r\n          active={casesType === 'recovered'}\r\n          onClick={(e) => setCasesType('recovered')}\r\n          cases={prettyPrint(currentCountry.todayRecovered)}\r\n          total={prettyPrint(currentCountry.recovered)} \r\n          title=\"Recovered\"/>\r\n\r\n          <InfoBox\r\n          active={casesType === 'deaths'}\r\n          onClick={(e) => setCasesType('deaths')}\r\n          cases={prettyPrint(currentCountry.todayDeaths)} \r\n          total={prettyPrint(currentCountry.deaths)} \r\n          title=\"Deaths\"/>\r\n\r\n        </div>\r\n\r\n        <Map \r\n        casesType={casesType} \r\n        countries={mapCountries} \r\n        center={mapCenter} \r\n        zoom={mapZoom}/>\r\n\r\n      </div>\r\n\r\n      <div className=\"rightside__app\">\r\n        <Card>\r\n          <CardContent>\r\n\r\n            <h3>Live Cases by Country</h3>\r\n\r\n            <Table countries={tableData}/>\r\n\r\n            <h3>Worldwide New {casesType}</h3>\r\n\r\n            <LineGraph casesType={casesType}/>\r\n\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}